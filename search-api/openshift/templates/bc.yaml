apiVersion: template.openshift.io/v1
kind: Template
metadata:
  labels:
    app: ${NAME}
  name: ${NAME}-build
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${NAME}
    labels:
      app: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: ${NAME}
    labels:
      app: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:${OUTPUT_IMAGE_TAG}
    resources:
      limits:
        cpu: ${CPU_LIMIT}
        memory: ${MEMORY_LIMIT}
      requests:
        cpu: ${CPU_REQUEST}
        memory: ${MEMORY_REQUEST}
    runPolicy: Serial
    source:
      contextDir: ${SOURCE_CONTEXT_DIR}
      git:
        ref: ${GIT_REF}
        uri: ${GIT_REPO_URL}
      dockerfile: |
        FROM docker-remote.artifacts.developer.gov.bc.ca/python:3.8.5-buster
        USER root

        # # Installing Oracle instant client
        WORKDIR    /opt/oracle
        RUN        apt-get update && apt-get install -y libaio1 wget unzip \
          && wget https://download.oracle.com/otn_software/linux/instantclient/instantclient-basiclite-linuxx64.zip \
          && unzip instantclient-basiclite-linuxx64.zip \
          && rm -f instantclient-basiclite-linuxx64.zip \
          && cd /opt/oracle/instantclient* \
          && rm -f *jdbc* *occi* *mysql* *README *jar uidrvci genezi adrci \
          && echo /opt/oracle/instantclient* > /etc/ld.so.conf.d/oracle-instantclient.conf \
          && ldconfig

        # Create working directory
        RUN mkdir /opt/app && chmod 755 /opt/app

        RUN apt-get update && \
          apt-get install -y python-dev build-essential libaio1

        WORKDIR /opt/app

        # Install the requirements
        COPY ./requirements/prod.txt .
        COPY ./requirements/dev.txt .
        COPY ./requirements/repo-libraries.txt .

        RUN pip install --no-cache-dir -r prod.txt
        RUN pip install --no-cache-dir -r repo-libraries.txt

        COPY . .

        RUN pip install .

        USER 1001

        EXPOSE 8080

        CMD ["gunicorn", "--bind", "0.0.0.0:8080",  "--config", "/opt/app/gunicorn_config.py", "wsgi:application"]

      type: Git
    strategy:
      type: Docker
      dockerStrategy:
        pullSecret:
          name: artifactory-creds

    triggers:
    - type: ConfigChange
parameters:
- description: |
    The name assigned to all of the objects defined in this template.
    You should keep this as default unless your know what your doing.
  displayName: Name
  name: NAME
  required: true
  value: search-api
- description: |
    The URL to your GIT repo, don't use the this default unless
    your just experimenting.
  displayName: Git Repo URL
  name: GIT_REPO_URL
  required: true
  value: https://github.com/bcgov/sbc-search.git
- description: The git reference or branch.
  displayName: Git Reference
  name: GIT_REF
  required: true
  value: main
- description: The source context directory.
  displayName: Source Context Directory
  name: SOURCE_CONTEXT_DIR
  required: false
  value: search-api
- description: The tag given to the built image.
  displayName: Output Image Tag
  name: OUTPUT_IMAGE_TAG
  required: true
  value: latest
- description: The resources CPU limit (in cores) for this build.
  displayName: Resources CPU Limit
  name: CPU_LIMIT
  required: true
  value: "2"
- description: The resources Memory limit (in Mi, Gi, etc) for this build.
  displayName: Resources Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 2Gi
- description: The resources CPU request (in cores) for this build.
  displayName: Resources CPU Request
  name: CPU_REQUEST
  required: true
  value: "1"
- description: The resources Memory request (in Mi, Gi, etc) for this build.
  displayName: Resources Memory Request
  name: MEMORY_REQUEST
  required: true
  value: 2Gi
